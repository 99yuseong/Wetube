/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/client/js/join.js":
/*!*******************************!*\
  !*** ./src/client/js/join.js ***!
  \*******************************/
/***/ (() => {

eval("function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar joinForm = document.querySelector('.join-form');\nvar inputEmail = joinForm.querySelector('.input-email');\nvar inputPw = joinForm.querySelector('.input-password');\nvar inputPw2 = joinForm.querySelector('.input-password2');\nvar inputName = joinForm.querySelector('.input-channel-name');\nvar inputAvatar = joinForm.querySelector('.input-avatar');\nvar emailMsg = joinForm.querySelector('.email-msg');\nvar nameMsg = joinForm.querySelector('.name-msg');\nvar passwordMsg = joinForm.querySelector('.password-msg');\nvar password2Msg = joinForm.querySelector('.password-confirm-msg');\nvar avatar = joinForm.querySelector('.avatar');\nvar joinBtn = joinForm.querySelector('.join-btn');\nvar validObj = {\n  email: {\n    valid: 'invalid',\n    msg: emailMsg\n  },\n  name: {\n    valid: 'invalid',\n    msg: nameMsg\n  },\n  password: {\n    valid: 'invalid',\n    msg: passwordMsg\n  },\n  password2: {\n    valid: 'invalid',\n    msg: password2Msg\n  }\n};\n\nvar emailCheck = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(event) {\n    var emailFormat, formatOk, check;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // email valid check\n            emailFormat = new RegExp('^[a-zA-Z0-9+-_.]+@[a-zA-Z0-9-.]+\\\\.[a-zA-Z]{2,6}$');\n            formatOk = emailFormat.test(inputEmail.value);\n\n            if (formatOk) {\n              _context.next = 6;\n              break;\n            }\n\n            emailMsg.innerText = inputEmail.value === '' ? '' : 'Email is invalid';\n            validObj.email.valid = 'invalid';\n            return _context.abrupt(\"return\");\n\n          case 6:\n            _context.next = 8;\n            return fetch('/join/email', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                email: inputEmail.value\n              })\n            });\n\n          case 8:\n            _context.next = 10;\n            return _context.sent.json();\n\n          case 10:\n            check = _context.sent;\n\n            if (check.email === 'taken') {\n              emailMsg.innerText = 'Already taken';\n              validObj.email.valid = 'invalid';\n            } else if (check.email === 'valid') {\n              emailMsg.innerText = 'Valid Email';\n              validObj.email.valid = 'valid';\n            }\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function emailCheck(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar nameCheck = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n    var check;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch('/join/name', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                name: inputName.value\n              })\n            });\n\n          case 2:\n            _context2.next = 4;\n            return _context2.sent.json();\n\n          case 4:\n            check = _context2.sent;\n\n            if (check.name === 'taken') {\n              nameMsg.innerText = 'Already taken';\n              validObj.name.valid = 'invalid';\n            } else {\n              nameMsg.innerText = inputName.value === '' ? '' : 'Valid Channel name';\n              validObj.name.valid = 'valid';\n            }\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function nameCheck() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar pwCheck = function pwCheck() {\n  var passwordFormat = new RegExp('(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[@$!%*#?&])[A-Za-z0-9@$!%*#?&]{8,}');\n\n  if (!passwordFormat.test(inputPw.value)) {\n    passwordMsg.innerText = inputPw.value === '' ? 'Required' : 'more than 8 characters, and one or more [Letters, Numbers, and (!)(@)(#)($)(%)(&)(*)(?)]';\n    validObj.password.valid = 'invalid';\n  } else {\n    passwordMsg.innerText = 'password ok';\n    validObj.password.valid = 'valid';\n  }\n};\n\nvar pwConfirm = function pwConfirm() {\n  if (inputPw.value !== inputPw2.value) {\n    password2Msg.innerText = inputPw.value === '' ? '' : 'Password confirmation Error';\n    validObj.password2.valid = 'invalid';\n  } else {\n    password2Msg.innerText = inputPw.value === '' ? '' : 'password confirmation ok';\n    validObj.password2.valid = 'valid';\n  }\n};\n\nvar showAvatar = function showAvatar() {\n  var reader = new FileReader();\n\n  reader.onload = function (e) {\n    avatar.src = e.target.result;\n  };\n\n  reader.readAsDataURL(inputAvatar.files[0]);\n};\n\nvar validCheck = function validCheck(event) {\n  event.preventDefault();\n  var count = 4;\n\n  for (section in validObj) {\n    if (validObj[section].valid === 'invalid') {\n      validObj[section].msg.innerText = 'required';\n    } else {\n      count -= 1;\n    }\n  }\n\n  if (count === 0) {\n    joinForm.submit();\n  }\n};\n\ninputEmail.addEventListener('input', emailCheck);\ninputName.addEventListener('input', nameCheck);\ninputPw.addEventListener('input', pwCheck);\ninputPw.addEventListener('blur', pwConfirm);\ninputPw2.addEventListener('input', pwConfirm);\ninputAvatar.addEventListener('change', showAvatar);\njoinBtn.addEventListener('click', validCheck);\n\n//# sourceURL=webpack://project_wetube/./src/client/js/join.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/client/js/join.js"]();
/******/ 	
/******/ })()
;